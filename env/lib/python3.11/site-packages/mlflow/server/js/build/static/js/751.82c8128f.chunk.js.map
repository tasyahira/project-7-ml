{"version":3,"file":"static/js/751.82c8128f.chunk.js","mappings":"2PAYAA,EAAAA,GAAAA,oBAAAA,UAAuC,+BAYvC,MAAMC,UAA4BC,EAAAA,UAAwBC,cAAA,SAAAC,WAAA,KACxDC,MAAQ,CACNC,SAAS,EACTC,WAAOC,EACPC,aAASD,EACTE,YAAa,EACbC,SAAU,GACV,KA6BFC,sBAAwBC,IAAwB,IAAvB,SAAEF,GAAeE,EACxCC,KAAKC,SAAS,CAAEJ,SAAAA,KAChB,KAEFK,oBAAuBT,IACrBU,EAAAA,EAAAA,sBAA4B,IAAIC,EAAAA,EAAaX,KAC7C,KAEFY,aAAe,CAACC,EAAoBC,KAClCP,KAAKC,SAAS,CAAEL,YAAaU,KAC7B,KAEFE,UAAY,KAERC,EAAAA,EAAAA,IAACC,EAAAA,SAAc,CAAAC,UACbC,EAAAA,EAAAA,IAAA,OAAKC,UAAU,aAAYF,SAAA,EACzBF,EAAAA,EAAAA,IAAA,OAAKI,UAAU,YAAWF,UACxBF,EAAAA,EAAAA,IAACK,EAAAA,IACC,CACAC,QAAM,EACNC,iBAAkBhB,KAAKT,MAAMK,YAC7BqB,SAAUjB,KAAKT,MAAMM,SACrBqB,SAAU,EACVC,SAAUnB,KAAKK,aAKfe,wBAAyB,CAAEL,QAAQ,QAGvCN,EAAAA,EAAAA,IAAA,OAAKI,UAAU,WAAUF,UACvBF,EAAAA,EAAAA,IAACY,EAAAA,GAAQ,CACPC,KAAMtB,KAAKT,MAAMI,QACjB4B,cAAevB,KAAKF,sBACpB0B,YAAaxB,KAAKE,oBAClBV,SAASiB,EAAAA,EAAAA,IAACgB,EAAAA,IAAO,IAAId,UAErBF,EAAAA,EAAAA,IAACiB,EAAAA,GAAI,CAACC,WAAY3B,KAAKT,MAAMK,YAAaJ,SAASiB,EAAAA,EAAAA,IAACgB,EAAAA,IAAO,eA5DvEG,WACE,MAAMC,GAAmBC,EAAAA,EAAAA,GAAO9B,KAAK+B,MAAMC,KAAMhC,KAAK+B,MAAME,SAC5DjC,KAAK+B,MACFG,YAAYL,GACZM,MAAMC,IACLpC,KAAKC,SAAS,CAAEN,QAAS,CAAE0C,KAAMD,GAAmB5C,SAAS,OAE9D8C,OAAO7C,IACNO,KAAKC,SAAS,CAAER,MAAOA,EAAOD,SAAS,OAI7C+C,oBACEvC,KAAK4B,WAGPY,mBAAmBC,GACbzC,KAAK+B,MAAMC,OAASS,EAAUT,MAAQhC,KAAK+B,MAAME,UAAYQ,EAAUR,SACzEjC,KAAK4B,WAkDTc,SACE,OAAI1C,KAAKT,MAAMC,SACNiB,EAAAA,EAAAA,IAAA,OAAKI,UAAU,4BAA2BF,SAAC,eAEhDX,KAAKT,MAAME,OAEXgB,EAAAA,EAAAA,IAAA,OAAKI,UAAU,0BAAyBF,SAAC,+FAKpCF,EAAAA,EAAAA,IAAA,OAAKI,UAAU,sBAAqBF,SAAEX,KAAKQ,eA7FlDrB,EASGwD,aAAe,CACpBT,YAAaU,EAAAA,IAwFjB,S","sources":["experiment-tracking/components/artifact-view-components/ShowArtifactPdfView.tsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { getSrc } from './ShowArtifactPage';\n// @ts-expect-error TS(7016): Could not find a declaration file for module 'reac... Remove this comment to see the full error message\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport { Pagination, Spinner } from '@databricks/design-system';\nimport { getArtifactBytesContent } from '../../../common/utils/ArtifactUtils';\nimport './ShowArtifactPdfView.css';\nimport Utils from '../../../common/utils/Utils';\nimport { ErrorWrapper } from '../../../common/utils/ErrorWrapper';\n\n// See: https://github.com/wojtekmaj/react-pdf/blob/master/README.md#enable-pdfjs-worker for how\n// workerSrc is supposed to be specified.\npdfjs.GlobalWorkerOptions.workerSrc = `./static-files/pdf.worker.js`;\n\ntype OwnProps = {\n  runUuid: string;\n  path: string;\n  getArtifact?: (...args: any[]) => any;\n};\n\ntype State = any;\n\ntype Props = OwnProps & typeof ShowArtifactPdfView.defaultProps;\n\nclass ShowArtifactPdfView extends Component<Props, State> {\n  state = {\n    loading: true,\n    error: undefined,\n    pdfData: undefined,\n    currentPage: 1,\n    numPages: 1,\n  };\n\n  static defaultProps = {\n    getArtifact: getArtifactBytesContent,\n  };\n\n  /** Fetches artifacts and updates component state with the result */\n  fetchPdf() {\n    const artifactLocation = getSrc(this.props.path, this.props.runUuid);\n    this.props\n      .getArtifact(artifactLocation)\n      .then((artifactPdfData: any) => {\n        this.setState({ pdfData: { data: artifactPdfData }, loading: false });\n      })\n      .catch((error: any) => {\n        this.setState({ error: error, loading: false });\n      });\n  }\n\n  componentDidMount() {\n    this.fetchPdf();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.path !== prevProps.path || this.props.runUuid !== prevProps.runUuid) {\n      this.fetchPdf();\n    }\n  }\n\n  onDocumentLoadSuccess = ({ numPages }: any) => {\n    this.setState({ numPages });\n  };\n\n  onDocumentLoadError = (error: any) => {\n    Utils.logErrorAndNotifyUser(new ErrorWrapper(error));\n  };\n\n  onPageChange = (newPageNumber: any, itemsPerPage: any) => {\n    this.setState({ currentPage: newPageNumber });\n  };\n\n  renderPdf = () => {\n    return (\n      <React.Fragment>\n        <div className='pdf-viewer'>\n          <div className='paginator'>\n            <Pagination\n              // @ts-expect-error TS(2322): Type '{ simple: true; currentPageIndex: number; nu... Remove this comment to see the full error message\n              simple\n              currentPageIndex={this.state.currentPage}\n              numTotal={this.state.numPages}\n              pageSize={1}\n              onChange={this.onPageChange}\n              /*\n               * Currently DuBois pagination does not natively support\n               * \"simple\" mode which is required here, hence `dangerouslySetAntdProps`\n               */\n              dangerouslySetAntdProps={{ simple: true }}\n            />\n          </div>\n          <div className='document'>\n            <Document\n              file={this.state.pdfData}\n              onLoadSuccess={this.onDocumentLoadSuccess}\n              onLoadError={this.onDocumentLoadError}\n              loading={<Spinner />}\n            >\n              <Page pageNumber={this.state.currentPage} loading={<Spinner />} />\n            </Document>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  };\n\n  render() {\n    if (this.state.loading) {\n      return <div className='artifact-pdf-view-loading'>Loading...</div>;\n    }\n    if (this.state.error) {\n      return (\n        <div className='artifact-pdf-view-error'>\n          Oops we couldn't load your file because of an error. Please reload the page to try again.\n        </div>\n      );\n    } else {\n      return <div className='pdf-outer-container'>{this.renderPdf()}</div>;\n    }\n  }\n}\n\nexport default ShowArtifactPdfView;\n"],"names":["pdfjs","ShowArtifactPdfView","Component","constructor","arguments","state","loading","error","undefined","pdfData","currentPage","numPages","onDocumentLoadSuccess","_ref","this","setState","onDocumentLoadError","Utils","ErrorWrapper","onPageChange","newPageNumber","itemsPerPage","renderPdf","_jsx","React","children","_jsxs","className","Pagination","simple","currentPageIndex","numTotal","pageSize","onChange","dangerouslySetAntdProps","Document","file","onLoadSuccess","onLoadError","Spinner","Page","pageNumber","fetchPdf","artifactLocation","getSrc","props","path","runUuid","getArtifact","then","artifactPdfData","data","catch","componentDidMount","componentDidUpdate","prevProps","render","defaultProps","getArtifactBytesContent"],"sourceRoot":""}